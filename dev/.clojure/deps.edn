{:mvn/repos {"sonatype" {:url "https://oss.sonatype.org/content/repositories/snapshots/"}}
 :aliases
 {;; pull in specific versions of Clojure:
  :1.10 {:override-deps {org.clojure/clojure {:mvn/version "1.10.0"}}}
  :1.10.1 {:override-deps {org.clojure/clojure {:mvn/version "1.10.1"}}}
  :master {:override-deps {org.clojure/clojure {:mvn/version "1.11.0-master-SNAPSHOT"}}}

  ;; testing <3
  :test {:extra-paths ["test"]
         :extra-deps {nubank/matcher-combinators {:mvn/version "2.1.0"}
                      com.cognitect/test-runner  {:git/url "https://github.com/cognitect-labs/test-runner.git"
                                                  :sha     "f7ef16dc3b8332b0d77bc0274578ad5270fbfedd"}}
         :main-opts ["-m" "cognitect.test-runner"
                     "-d" "test"]}

  ;; - see https://github.com/seancorfield/readme
  :readme {:extra-deps {seancorfield/readme {:mvn/version "RELEASE"}}
           :main-opts ["-m" "seancorfield.readme"]}

  ;; - see https://github.com/hugoduncan/criterium/
  ;; - (require '[criterium.core :refer [bench]])
  ;; - (bench (your-expression))
  :bench {:extra-deps {criterium {:mvn/version "RELEASE"}}}

  ;; - see https://github.com/clojure-goes-fast/clj-java-decompiler
  ;; - note: this only seems to work on JDK 8
  ;; - (require '[clj-java-decompiler.core :refer [decompile]])
  ;; - (decompile (your-expression))
  :decompile {:extra-deps {com.clojure-goes-fast/clj-java-decompiler {:mvn/version "RELEASE"}}}
  ;; - see https://github.com/clojure-goes-fast/clj-memory-meter
  ;; - (require '[clj-memory-meter.core :as mm])
  ;; - (mm/measure (your-expression))

  :measure {:extra-deps {com.clojure-goes-fast/clj-memory-meter {:mvn/version "RELEASE"}}}
  ;; - see https://github.com/Olical/depot

  :outdated {:extra-deps {olical/depot {:mvn/version "1.8.4"}}
             :main-opts  ["-m" "depot.outdated.main" "-a" "outdated"]}

  ;; REPL-related tools:
  ;; - start a modern nREPL server on a random available port:
  :repl {;;:extra-paths ["src" "test" "resources"]
          :main-opts   ["-m nrepl.cmdline"
                        "--middleware" "[cider.nrepl/cider-middleware]"]
          :extra-deps {nrepl/nrepl {:mvn/version "0.7.0"}
                       cider/cider-nrepl {:mvn/version "0.23.0"}
                       ;; nubank/matcher-combinators {:mvn/version "2.1.0"}
                       }}

  ;; - start a Socket REPL on port 50505:
  :socket {:jvm-opts ["-Dclojure.server.repl={:port,50505,:accept,clojure.core.server/repl}"]}
  ;; - start a Socket pREPL on port 40404:

  ;; - see https://github.com/stuarthalloway/reflector
  :reflect {:extra-deps {com.stuarthalloway/reflector {:git/url "https://github.com/stuarthalloway/reflector"
                                                       :sha "93a0c19b4526c1180959e940202928d35e5c3cef"}}}

:deps ; to get access to clojure.tools.deps.alpha.repl/add-lib
;; - now you can add new deps to a running REPL:
;; (require '[clojure.tools.deps.alpha.repl :refer [add-lib]])
;; (add-lib 'some/library {:mvn/version "RELEASE"})
;; - and you can git deps too; here's how to get the master version of a lib:
;; (require '[clojure.tools.gitlibs :as gitlibs])
;; (defn load-master [lib]
;;   (let [git (str "https://github.com/" lib ".git")]
;;    (add-lib lib {:git/url git :sha (gitlibs/resolve git "master")})))
;; - e.g., using the GitHub path (not the usual Maven group/artifact):
;; (load-master 'clojure/tools.trace)
{:extra-deps {org.clojure/tools.deps.alpha {:git/url "https://github.com/clojure/tools.deps.alpha"
                                            :sha "19d197ab221d37db750423eb970880cb87a91100"}}
 ;; this ensures we have a DynamicClassLoader, which is needed for
 ;; add-lib to work, if we're starting other processes via aliases
 ;; such as a socket REPL or Cognitect's REBL etc
 :main-opts ["-e" "(->>(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))"]}

:graph {:deps {org.clojure/tools.deps.graph {:mvn/version "0.2.24"}}
        :main-opts ["-m" "clojure.tools.deps.graph"]}

:spec2 ; to get access to the latest spec-alpha2
{:extra-deps {org.clojure/spec-alpha2
              {:git/url "https://github.com/clojure/spec-alpha2"
               :sha "b644e4d8c5553e10544d920306690fffe9b53e15"}}}

:format {:extra-paths ["test"]
         :extra-deps  {cljfmt {:mvn/version "0.6.4"}}
         :main-opts   ["-m cljfmt.main"
                       "fix"
                       "--indents .cljfmt-indents.edn"]}
:nsorg {:extra-paths ["test"]
        :extra-deps  {nsorg-cli {:mvn/version "0.3.1"}}
        :main-opts   ["-m" "nsorg.cli"
                      "--replace"]}
:lint {:extra-paths ["test"]
       :main-opts   ["-m clj-kondo.main"
                     "--lint src test"]
       :extra-deps {clj-kondo {:mvn/version "2020.05.02"}}}

;; project creation from templates:
;; - see https://github.com/seancorfield/clj-new
;; - create an application project:
;;   - clj -A:new app myname/myapp
;;   - cd myapp
;;   - clj -m myname.myapp # run it!
;;   - clj -A:test:runner # run the tests!
;; - create a library project:
;;   - clj -A:new lib myname/my-cool-lib
;;   - cd my-cool-lib
;;   - clj -A:test:runner # run the tests!
:new {:extra-deps {seancorfield/clj-new {:mvn/version "RELEASE"}}
      :main-opts ["-m" "clj-new.create"]}

;; uberjar building:
;; - see https://github.com/seancorfield/depstar for a minimalist approach:
;;   - clj -A:uberjar result.jar
;; - to run it:
;;   - java -cp result.jar clojure.main -m mymain.namespace
;; - build a library JAR:
;;   - clj -A:jar result-lib.jar
:uberjar {:extra-deps {seancorfield/depstar {:mvn/version "RELEASE"}}
          :main-opts ["-m" "hf.depstar.uberjar"]}

:jar {:extra-deps {seancorfield/depstar {:mvn/version "RELEASE"}}
      :main-opts ["-m" "hf.depstar.jar"]}

;; jar installation and deployment:
;; - see https://github.com/slipset/deps-deploy
;;   - clj -A:install project.jar
;;   - clj -A:deploy project.jar
;; - these rely on having a pom.xml file and, for deployment, these two
;;   environment variables: CLOJARS_USERNAME, CLOJARS_PASSWORD
:install {:extra-deps {deps-deploy {:mvn/version "RELEASE"}}
          :main-opts ["-m" "deps-deploy.deps-deploy" "install"]}

:deploy {:extra-deps {deps-deploy {:mvn/version "RELEASE"}}
         :main-opts ["-m" "deps-deploy.deps-deploy" "deploy"]}

;; - inspired by Ruby's -pne command line option which lets you process lines of stdin bound to $_
;; - usage: cat file-of-numbers.txt | clj -Mpne -e '($ (-> $_ Long/parseLong inc))'
:pne {:main-opts,["-e","(defmacro,$,[&,body],(list,'while,(list,'when-let,'[$_,(read-line)],(let,[v,(gensym)],(list,'let,(vector,v,(list*,'do,body)),(list,'println,v))),'$_)))"]}}}
