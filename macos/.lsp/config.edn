{"clj-kondo" {:skip-comments true
              :linters {:refer-all         {:exclude [clojure.test midje.sweet]}
                        :unresolved-symbol {:level   :error
                                            :exclude [fact
                                                      facts
                                                      =>
                                                      thrown-match?
                                                      (midje.sweet/fact)
                                                      (midje.sweet/facts)
                                                      (midje.parsing.arrow-symbols/=>)]}}
              :lint-as {common-graphql.lacinia.sweet/defresolver    clojure.core/def
                        common-graphql.lacinia.sweet/defmutation    clojure.core/def
                        common-graphql.lacinia.sweet/definterface   clojure.core/def
                        common-graphql.lacinia.sweet/defobject      clojure.core/def
                        common-graphql.lacinia.sweet/defscalar      clojure.core/def
                        common-graphql.lacinia.sweet/defunion       clojure.core/def
                        common-graphql.lacinia.sweet/definput       clojure.core/def
                        common-graphql.lacinia.sweet/defenum        clojure.core/def
                        state-flow.cljtest/defflow                  clojure.core/def
                        clojure.test.check.clojure-test/defspec     clojure.core/def
                        s/fdef                                      clojure.core/def
                        abrams.logic.graph/defresolver              clojure.core/defn
                        abrams.logic.graph/defmutation              clojure.core/defn
                        rewrite-clj.zip/edit->                      clojure.core/->
                        rewrite-clj.zip.subedit/edit->              clojure.core/->

                        ;; nubank only
                        integration.aux.init/defflow                clojure.core/def
                        postman.aux.init/defflow                    clojure.core/def}}
 "macro-defs" {common-graphql.lacinia.sweet/defenum                [:declaration :elements]
               common-graphql.lacinia.sweet/definterface           [:declaration :elements]
               common-graphql.lacinia.sweet/definput               [:declaration :elements]
               common-graphql.lacinia.sweet/defscalar              [:declaration :elements]
               common-graphql.lacinia.sweet/defunion               [:declaration :elements]
               common-graphql.lacinia.sweet/mutation               [:declaration :elements]
               common-graphql.lacinia.sweet/defobject              [:declaration :elements]
               fulcro.client.mutations/defmutation                 [:declaration :params :bound-elements]
               schema.core/defschema                               [:declaration :elements]
               schema.core/def                                     [:declaration :elements]
               clojure.test.check.clojure-test/defspec             [:declaration :elements]
               schema.core/fn                                      [:params :bound-elements]
               schema.test/deftest                                 [{:element :declaration :tags #{:unused}} :elements]
               state-flow.cljtest/defflow                          [{:element :declaration :tags #{:unused}} :elements]
               org.httpkit.server/with-channel                     [:element :param :bound-elements]
               plumbing.core/fnk                                   [:params :bound-elements]

               ;; nubank only
               defmutation                                         [:declaration :params :bound-elements]
               defresolver                                         [:declaration :params :bound-elements]
               logic.graph/defresolver                             [:declaration :params :bound-elements]
               logic.graph/defmutation                             [:declaration :params :bound-elements]
               abrams.logic.graph/defresolver                      [:declaration :params :bound-elements]
               abrams.logic.graph/defmutation                      [:declaration :params :bound-elements]
               ;; common-datomic.test-helpers/let-entities            [:declaration :params :params :bound-elements]
               integration.aux.init/defflow                        [{:element :declaration :tags #{:unused}} :elements]
               postman.aux.init/defflow                            [{:element :declaration :tags #{:unused}} :elements]
               nubank.shuffle.common.fulcro.db-helpers/defmutation [:declaration :params :bound-elements]
               nubank.shuffle.common.ui.helpers/defc               [:declaration :params :bound-elements]}
 "cljfmt" {:indents
            {against-background      [[:inner 0]]
             as-admin                [[:block 1]]
             as-customer             [[:block 1]]
             as-customer-with-lift   [[:block 1]]
             as-delegate             [[:block 2]]
             as-delegate-with-lift   [[:block 2]]
             as-of                   [[:block 1]]
             assoc                   [[:block 1]]
             assoc-if                [[:block 1]]
             assoc-in-if             [[:block 1]]
             assoc-some              [[:block 1]]
             assoc-in-some           [[:block 1]]
             constraint-fn           [[:block 2]]
             consume!                [[:block 0]]
             data-fn                 [[:block 1]]
             defhandler              [[:block 2]]
             defint                  [[:block 0]]
             defuf                   [[:block 1]]
             embeds                  [[:block 0]]
             expand-routes           [[:inner 1]]
             fact                    [[:block 1]]
             facts                   [[:block 1]]
             flow                    [[:block 1]]
             flow-with-defaults      [[:block 1]]
             flow-as-of              [[:block 1]]
             flow-without-validation [[:block 1]]
             for-all                 [[:block 1]]
             future-fact             [[:block 1]]
             future-facts            [[:block 1]]
             idempotent-start        [[:block 1]]
             idempotent-stop         [[:block 1]]
             ignore-conflict         [[:inner 0]]
             let-entities            [[:block 2]]
             let-flow                [[:block 1]]
             log-messages            [[:block 0]]
             logged-call             [[:block 1]]
             non-test-action         [[:inner 0]]
             profile                 [[:block 2]]
             profiled                [[:block 1]]
             provided                [[:inner 0]]
             quick-check             [[:block 1]]
             rethrow                 [[:block 1]]
             run-recipe              [[:inner 0]]
             some-with-open          [[:block 1]]
             system-map              [[:block 0]]
             tabular                 [[:inner 0]]
             try-type                [[:block 0]]
             with-cid                [[:block 1]]
             with-fn-validation      [[:block 0]]
             with-responses          [[:block 0]]
             with-scopes             [[:block 1]]}}
 "linters" {:unused-namespace-declarations #{"postman/" "test/"}}
 "source-paths" ["src" "test" "postman"]
 "use-metadata-for-privacy?" true
 "keep-require-at-start?" true
 "show-docs-arity-on-same-line?" true
 "auto-add-ns-to-new-files?" true
 "dependency-scheme" "jar"}
